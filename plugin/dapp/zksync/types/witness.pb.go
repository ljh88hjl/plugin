// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.0
// source: witness.proto

package types

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ZkSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PubKey   *ZkPubKey `protobuf:"bytes,1,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	SignInfo string    `protobuf:"bytes,2,opt,name=signInfo,proto3" json:"signInfo,omitempty"`
	Msg      *ZkMsg    `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ZkSignature) Reset() {
	*x = ZkSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSignature) ProtoMessage() {}

func (x *ZkSignature) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSignature.ProtoReflect.Descriptor instead.
func (*ZkSignature) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{0}
}

func (x *ZkSignature) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ZkSignature) GetSignInfo() string {
	if x != nil {
		return x.SignInfo
	}
	return ""
}

func (x *ZkSignature) GetMsg() *ZkMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type ZkMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First  string `protobuf:"bytes,1,opt,name=first,proto3" json:"first,omitempty"`
	Second string `protobuf:"bytes,2,opt,name=second,proto3" json:"second,omitempty"`
	Third  string `protobuf:"bytes,3,opt,name=third,proto3" json:"third,omitempty"`
}

func (x *ZkMsg) Reset() {
	*x = ZkMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkMsg) ProtoMessage() {}

func (x *ZkMsg) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkMsg.ProtoReflect.Descriptor instead.
func (*ZkMsg) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{1}
}

func (x *ZkMsg) GetFirst() string {
	if x != nil {
		return x.First
	}
	return ""
}

func (x *ZkMsg) GetSecond() string {
	if x != nil {
		return x.Second
	}
	return ""
}

func (x *ZkMsg) GetThird() string {
	if x != nil {
		return x.Third
	}
	return ""
}

type ZkPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X string `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y string `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *ZkPubKey) Reset() {
	*x = ZkPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkPubKey) ProtoMessage() {}

func (x *ZkPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkPubKey.ProtoReflect.Descriptor instead.
func (*ZkPubKey) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{2}
}

func (x *ZkPubKey) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *ZkPubKey) GetY() string {
	if x != nil {
		return x.Y
	}
	return ""
}

type SiblingPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
	Helper []string `protobuf:"bytes,2,rep,name=helper,proto3" json:"helper,omitempty"`
}

func (x *SiblingPath) Reset() {
	*x = SiblingPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiblingPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiblingPath) ProtoMessage() {}

func (x *SiblingPath) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiblingPath.ProtoReflect.Descriptor instead.
func (*SiblingPath) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{3}
}

func (x *SiblingPath) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *SiblingPath) GetHelper() []string {
	if x != nil {
		return x.Helper
	}
	return nil
}

type AccountWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	EthAddr       string       `protobuf:"bytes,2,opt,name=ethAddr,proto3" json:"ethAddr,omitempty"`
	Chain33Addr   string       `protobuf:"bytes,3,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`
	TokenTreeRoot string       `protobuf:"bytes,4,opt,name=tokenTreeRoot,proto3" json:"tokenTreeRoot,omitempty"` //sub chain token tree root
	PubKey        *ZkPubKey    `protobuf:"bytes,5,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Sibling       *SiblingPath `protobuf:"bytes,6,opt,name=sibling,proto3" json:"sibling,omitempty"`
}

func (x *AccountWitness) Reset() {
	*x = AccountWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountWitness) ProtoMessage() {}

func (x *AccountWitness) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountWitness.ProtoReflect.Descriptor instead.
func (*AccountWitness) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{4}
}

func (x *AccountWitness) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AccountWitness) GetEthAddr() string {
	if x != nil {
		return x.EthAddr
	}
	return ""
}

func (x *AccountWitness) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *AccountWitness) GetTokenTreeRoot() string {
	if x != nil {
		return x.TokenTreeRoot
	}
	return ""
}

func (x *AccountWitness) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *AccountWitness) GetSibling() *SiblingPath {
	if x != nil {
		return x.Sibling
	}
	return nil
}

type TokenWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      uint64       `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`          //eth contract define token ID
	Balance string       `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"` //eth balance u128
	Sibling *SiblingPath `protobuf:"bytes,3,opt,name=sibling,proto3" json:"sibling,omitempty"`
}

func (x *TokenWitness) Reset() {
	*x = TokenWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenWitness) ProtoMessage() {}

func (x *TokenWitness) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenWitness.ProtoReflect.Descriptor instead.
func (*TokenWitness) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{5}
}

func (x *TokenWitness) GetID() uint64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TokenWitness) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *TokenWitness) GetSibling() *SiblingPath {
	if x != nil {
		return x.Sibling
	}
	return nil
}

//one operation branch
type OperationMetaBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountWitness *AccountWitness `protobuf:"bytes,1,opt,name=accountWitness,proto3" json:"accountWitness,omitempty"`
	TokenWitness   *TokenWitness   `protobuf:"bytes,2,opt,name=tokenWitness,proto3" json:"tokenWitness,omitempty"`
}

func (x *OperationMetaBranch) Reset() {
	*x = OperationMetaBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationMetaBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationMetaBranch) ProtoMessage() {}

func (x *OperationMetaBranch) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationMetaBranch.ProtoReflect.Descriptor instead.
func (*OperationMetaBranch) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{6}
}

func (x *OperationMetaBranch) GetAccountWitness() *AccountWitness {
	if x != nil {
		return x.AccountWitness
	}
	return nil
}

func (x *OperationMetaBranch) GetTokenWitness() *TokenWitness {
	if x != nil {
		return x.TokenWitness
	}
	return nil
}

// before and after operation data
type OperationPairBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Before *OperationMetaBranch `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After  *OperationMetaBranch `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *OperationPairBranch) Reset() {
	*x = OperationPairBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationPairBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationPairBranch) ProtoMessage() {}

func (x *OperationPairBranch) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationPairBranch.ProtoReflect.Descriptor instead.
func (*OperationPairBranch) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{7}
}

func (x *OperationPairBranch) GetBefore() *OperationMetaBranch {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *OperationPairBranch) GetAfter() *OperationMetaBranch {
	if x != nil {
		return x.After
	}
	return nil
}

type OperationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHeight uint64       `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	TxIndex     uint32       `protobuf:"varint,2,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	OpIndex     uint32       `protobuf:"varint,3,opt,name=opIndex,proto3" json:"opIndex,omitempty"`
	TxType      uint32       `protobuf:"varint,4,opt,name=txType,proto3" json:"txType,omitempty"`
	TxHash      string       `protobuf:"bytes,5,opt,name=txHash,proto3" json:"txHash,omitempty"`
	AccountID   uint64       `protobuf:"varint,6,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TokenID     uint64       `protobuf:"varint,7,opt,name=tokenID,proto3" json:"tokenID,omitempty"`
	Amount      string       `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	FeeAmount   string       `protobuf:"bytes,9,opt,name=feeAmount,proto3" json:"feeAmount,omitempty"`
	SigData     *ZkSignature `protobuf:"bytes,10,opt,name=sigData,proto3" json:"sigData,omitempty"`
	Roots       []string     `protobuf:"bytes,11,rep,name=roots,proto3" json:"roots,omitempty"` //每个操作后的root
	//每个operation data由一对 操作前后数据组成，不同操作可以有多个操作数据，deposit:1,transfer:2
	OperationBranches []*OperationPairBranch `protobuf:"bytes,12,rep,name=operationBranches,proto3" json:"operationBranches,omitempty"`
	//操作特殊数据,像订单数据
	SpecialInfo *OperationSpecialInfo `protobuf:"bytes,13,opt,name=specialInfo,proto3" json:"specialInfo,omitempty"`
}

func (x *OperationInfo) Reset() {
	*x = OperationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationInfo) ProtoMessage() {}

func (x *OperationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationInfo.ProtoReflect.Descriptor instead.
func (*OperationInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{8}
}

func (x *OperationInfo) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *OperationInfo) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *OperationInfo) GetOpIndex() uint32 {
	if x != nil {
		return x.OpIndex
	}
	return 0
}

func (x *OperationInfo) GetTxType() uint32 {
	if x != nil {
		return x.TxType
	}
	return 0
}

func (x *OperationInfo) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *OperationInfo) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *OperationInfo) GetTokenID() uint64 {
	if x != nil {
		return x.TokenID
	}
	return 0
}

func (x *OperationInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *OperationInfo) GetFeeAmount() string {
	if x != nil {
		return x.FeeAmount
	}
	return ""
}

func (x *OperationInfo) GetSigData() *ZkSignature {
	if x != nil {
		return x.SigData
	}
	return nil
}

func (x *OperationInfo) GetRoots() []string {
	if x != nil {
		return x.Roots
	}
	return nil
}

func (x *OperationInfo) GetOperationBranches() []*OperationPairBranch {
	if x != nil {
		return x.OperationBranches
	}
	return nil
}

func (x *OperationInfo) GetSpecialInfo() *OperationSpecialInfo {
	if x != nil {
		return x.SpecialInfo
	}
	return nil
}

type OperationSpecialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpecialDatas []*OperationSpecialData `protobuf:"bytes,1,rep,name=specialDatas,proto3" json:"specialDatas,omitempty"`
}

func (x *OperationSpecialInfo) Reset() {
	*x = OperationSpecialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSpecialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSpecialInfo) ProtoMessage() {}

func (x *OperationSpecialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSpecialInfo.ProtoReflect.Descriptor instead.
func (*OperationSpecialInfo) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{9}
}

func (x *OperationSpecialInfo) GetSpecialDatas() []*OperationSpecialData {
	if x != nil {
		return x.SpecialDatas
	}
	return nil
}

type OrderPricePair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sell uint64 `protobuf:"varint,1,opt,name=sell,proto3" json:"sell,omitempty"`
	Buy  uint64 `protobuf:"varint,2,opt,name=buy,proto3" json:"buy,omitempty"`
}

func (x *OrderPricePair) Reset() {
	*x = OrderPricePair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPricePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPricePair) ProtoMessage() {}

func (x *OrderPricePair) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPricePair.ProtoReflect.Descriptor instead.
func (*OrderPricePair) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{10}
}

func (x *OrderPricePair) GetSell() uint64 {
	if x != nil {
		return x.Sell
	}
	return 0
}

func (x *OrderPricePair) GetBuy() uint64 {
	if x != nil {
		return x.Buy
	}
	return 0
}

type OperationSpecialData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID     uint64            `protobuf:"varint,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	RecipientID   uint64            `protobuf:"varint,2,opt,name=recipientID,proto3" json:"recipientID,omitempty"`    //accountID侧设置的recipientID
	RecipientAddr string            `protobuf:"bytes,3,opt,name=recipientAddr,proto3" json:"recipientAddr,omitempty"` //accountID侧设置的recipientAddr
	Amount        []string          `protobuf:"bytes,4,rep,name=amount,proto3" json:"amount,omitempty"`               //accountID侧最初设置的amount
	ChainID       []uint32          `protobuf:"varint,5,rep,packed,name=chainID,proto3" json:"chainID,omitempty"`
	TokenID       []uint64          `protobuf:"varint,6,rep,packed,name=tokenID,proto3" json:"tokenID,omitempty"`
	PricePair     []*OrderPricePair `protobuf:"bytes,7,rep,name=pricePair,proto3" json:"pricePair,omitempty"`
	SigData       *ZkSignature      `protobuf:"bytes,8,opt,name=sigData,proto3" json:"sigData,omitempty"`
}

func (x *OperationSpecialData) Reset() {
	*x = OperationSpecialData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_witness_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationSpecialData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationSpecialData) ProtoMessage() {}

func (x *OperationSpecialData) ProtoReflect() protoreflect.Message {
	mi := &file_witness_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationSpecialData.ProtoReflect.Descriptor instead.
func (*OperationSpecialData) Descriptor() ([]byte, []int) {
	return file_witness_proto_rawDescGZIP(), []int{11}
}

func (x *OperationSpecialData) GetAccountID() uint64 {
	if x != nil {
		return x.AccountID
	}
	return 0
}

func (x *OperationSpecialData) GetRecipientID() uint64 {
	if x != nil {
		return x.RecipientID
	}
	return 0
}

func (x *OperationSpecialData) GetRecipientAddr() string {
	if x != nil {
		return x.RecipientAddr
	}
	return ""
}

func (x *OperationSpecialData) GetAmount() []string {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *OperationSpecialData) GetChainID() []uint32 {
	if x != nil {
		return x.ChainID
	}
	return nil
}

func (x *OperationSpecialData) GetTokenID() []uint64 {
	if x != nil {
		return x.TokenID
	}
	return nil
}

func (x *OperationSpecialData) GetPricePair() []*OrderPricePair {
	if x != nil {
		return x.PricePair
	}
	return nil
}

func (x *OperationSpecialData) GetSigData() *ZkSignature {
	if x != nil {
		return x.SigData
	}
	return nil
}

var File_witness_proto protoreflect.FileDescriptor

var file_witness_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x72, 0x0a, 0x0b, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x5a, 0x6b, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x4b, 0x0a, 0x05, 0x5a, 0x6b,
	0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x69, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x68, 0x69, 0x72, 0x64, 0x22, 0x26, 0x0a, 0x08, 0x5a, 0x6b, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x79, 0x22,
	0x39, 0x0a, 0x0b, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x22, 0xd9, 0x01, 0x0a, 0x0e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x69, 0x62, 0x6c,
	0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x74, 0x68, 0x52, 0x07, 0x73,
	0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x66, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x2c, 0x0a, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x62, 0x6c, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x74, 0x68, 0x52, 0x07, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x8d,
	0x01, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x3d, 0x0a, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x22, 0x7b,
	0x0a, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x52, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xd0, 0x03, 0x0a, 0x0d,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x70, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x74, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x11, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x57,
	0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x36, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x75, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x62, 0x75, 0x79, 0x22,
	0xab, 0x02, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x69,
	0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12,
	0x2c, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x07, 0x73, 0x69, 0x67, 0x44, 0x61, 0x74, 0x61, 0x42, 0x31, 0x5a,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x33, 0x33, 0x63, 0x6e,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x64,
	0x61, 0x70, 0x70, 0x2f, 0x7a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_witness_proto_rawDescOnce sync.Once
	file_witness_proto_rawDescData = file_witness_proto_rawDesc
)

func file_witness_proto_rawDescGZIP() []byte {
	file_witness_proto_rawDescOnce.Do(func() {
		file_witness_proto_rawDescData = protoimpl.X.CompressGZIP(file_witness_proto_rawDescData)
	})
	return file_witness_proto_rawDescData
}

var file_witness_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_witness_proto_goTypes = []interface{}{
	(*ZkSignature)(nil),          // 0: types.ZkSignature
	(*ZkMsg)(nil),                // 1: types.ZkMsg
	(*ZkPubKey)(nil),             // 2: types.ZkPubKey
	(*SiblingPath)(nil),          // 3: types.SiblingPath
	(*AccountWitness)(nil),       // 4: types.AccountWitness
	(*TokenWitness)(nil),         // 5: types.TokenWitness
	(*OperationMetaBranch)(nil),  // 6: types.OperationMetaBranch
	(*OperationPairBranch)(nil),  // 7: types.OperationPairBranch
	(*OperationInfo)(nil),        // 8: types.OperationInfo
	(*OperationSpecialInfo)(nil), // 9: types.OperationSpecialInfo
	(*OrderPricePair)(nil),       // 10: types.OrderPricePair
	(*OperationSpecialData)(nil), // 11: types.OperationSpecialData
}
var file_witness_proto_depIdxs = []int32{
	2,  // 0: types.ZkSignature.pubKey:type_name -> types.ZkPubKey
	1,  // 1: types.ZkSignature.msg:type_name -> types.ZkMsg
	2,  // 2: types.AccountWitness.pubKey:type_name -> types.ZkPubKey
	3,  // 3: types.AccountWitness.sibling:type_name -> types.SiblingPath
	3,  // 4: types.TokenWitness.sibling:type_name -> types.SiblingPath
	4,  // 5: types.OperationMetaBranch.accountWitness:type_name -> types.AccountWitness
	5,  // 6: types.OperationMetaBranch.tokenWitness:type_name -> types.TokenWitness
	6,  // 7: types.OperationPairBranch.before:type_name -> types.OperationMetaBranch
	6,  // 8: types.OperationPairBranch.after:type_name -> types.OperationMetaBranch
	0,  // 9: types.OperationInfo.sigData:type_name -> types.ZkSignature
	7,  // 10: types.OperationInfo.operationBranches:type_name -> types.OperationPairBranch
	9,  // 11: types.OperationInfo.specialInfo:type_name -> types.OperationSpecialInfo
	11, // 12: types.OperationSpecialInfo.specialDatas:type_name -> types.OperationSpecialData
	10, // 13: types.OperationSpecialData.pricePair:type_name -> types.OrderPricePair
	0,  // 14: types.OperationSpecialData.sigData:type_name -> types.ZkSignature
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_witness_proto_init() }
func file_witness_proto_init() {
	if File_witness_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_witness_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiblingPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationMetaBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationPairBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSpecialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPricePair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_witness_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationSpecialData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_witness_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_witness_proto_goTypes,
		DependencyIndexes: file_witness_proto_depIdxs,
		MessageInfos:      file_witness_proto_msgTypes,
	}.Build()
	File_witness_proto = out.File
	file_witness_proto_rawDesc = nil
	file_witness_proto_goTypes = nil
	file_witness_proto_depIdxs = nil
}
