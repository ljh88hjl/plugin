// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.18.0
// source: zksync.proto

package types

import (
	context "context"
	types "github.com/33cn/chain33/types"
	grpc "google.golang.org/grpc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ZksyncAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*ZksyncAction_Deposit
	//	*ZksyncAction_Withdraw
	//	*ZksyncAction_ContractToTree
	//	*ZksyncAction_TreeToContract
	//	*ZksyncAction_Transfer
	//	*ZksyncAction_TransferToNew
	//	*ZksyncAction_ForceExit
	//	*ZksyncAction_SetPubKey
	//	*ZksyncAction_FullExit
	//	*ZksyncAction_Swap
	//	*ZksyncAction_SetVerifyKey
	//	*ZksyncAction_CommitProof
	//	*ZksyncAction_SetVerifier
	Value isZksyncAction_Value `protobuf_oneof:"value"`
	Ty    int32                `protobuf:"varint,14,opt,name=ty,proto3" json:"ty,omitempty"`
}

func (x *ZksyncAction) Reset() {
	*x = ZksyncAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZksyncAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZksyncAction) ProtoMessage() {}

func (x *ZksyncAction) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZksyncAction.ProtoReflect.Descriptor instead.
func (*ZksyncAction) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{0}
}

func (m *ZksyncAction) GetValue() isZksyncAction_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *ZksyncAction) GetDeposit() *ZkDeposit {
	if x, ok := x.GetValue().(*ZksyncAction_Deposit); ok {
		return x.Deposit
	}
	return nil
}

func (x *ZksyncAction) GetWithdraw() *ZkWithdraw {
	if x, ok := x.GetValue().(*ZksyncAction_Withdraw); ok {
		return x.Withdraw
	}
	return nil
}

func (x *ZksyncAction) GetContractToTree() *ZkContractToTree {
	if x, ok := x.GetValue().(*ZksyncAction_ContractToTree); ok {
		return x.ContractToTree
	}
	return nil
}

func (x *ZksyncAction) GetTreeToContract() *ZkTreeToContract {
	if x, ok := x.GetValue().(*ZksyncAction_TreeToContract); ok {
		return x.TreeToContract
	}
	return nil
}

func (x *ZksyncAction) GetTransfer() *ZkTransfer {
	if x, ok := x.GetValue().(*ZksyncAction_Transfer); ok {
		return x.Transfer
	}
	return nil
}

func (x *ZksyncAction) GetTransferToNew() *ZkTransferToNew {
	if x, ok := x.GetValue().(*ZksyncAction_TransferToNew); ok {
		return x.TransferToNew
	}
	return nil
}

func (x *ZksyncAction) GetForceExit() *ZkForceExit {
	if x, ok := x.GetValue().(*ZksyncAction_ForceExit); ok {
		return x.ForceExit
	}
	return nil
}

func (x *ZksyncAction) GetSetPubKey() *ZkSetPubKey {
	if x, ok := x.GetValue().(*ZksyncAction_SetPubKey); ok {
		return x.SetPubKey
	}
	return nil
}

func (x *ZksyncAction) GetFullExit() *ZkFullExit {
	if x, ok := x.GetValue().(*ZksyncAction_FullExit); ok {
		return x.FullExit
	}
	return nil
}

func (x *ZksyncAction) GetSwap() *ZkSwap {
	if x, ok := x.GetValue().(*ZksyncAction_Swap); ok {
		return x.Swap
	}
	return nil
}

func (x *ZksyncAction) GetSetVerifyKey() *ZkVerifyKey {
	if x, ok := x.GetValue().(*ZksyncAction_SetVerifyKey); ok {
		return x.SetVerifyKey
	}
	return nil
}

func (x *ZksyncAction) GetCommitProof() *ZkCommitProof {
	if x, ok := x.GetValue().(*ZksyncAction_CommitProof); ok {
		return x.CommitProof
	}
	return nil
}

func (x *ZksyncAction) GetSetVerifier() *ZkVerifier {
	if x, ok := x.GetValue().(*ZksyncAction_SetVerifier); ok {
		return x.SetVerifier
	}
	return nil
}

func (x *ZksyncAction) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

type isZksyncAction_Value interface {
	isZksyncAction_Value()
}

type ZksyncAction_Deposit struct {
	Deposit *ZkDeposit `protobuf:"bytes,1,opt,name=deposit,proto3,oneof"`
}

type ZksyncAction_Withdraw struct {
	Withdraw *ZkWithdraw `protobuf:"bytes,2,opt,name=withdraw,proto3,oneof"`
}

type ZksyncAction_ContractToTree struct {
	ContractToTree *ZkContractToTree `protobuf:"bytes,3,opt,name=contractToTree,proto3,oneof"`
}

type ZksyncAction_TreeToContract struct {
	TreeToContract *ZkTreeToContract `protobuf:"bytes,4,opt,name=treeToContract,proto3,oneof"`
}

type ZksyncAction_Transfer struct {
	Transfer *ZkTransfer `protobuf:"bytes,5,opt,name=transfer,proto3,oneof"`
}

type ZksyncAction_TransferToNew struct {
	TransferToNew *ZkTransferToNew `protobuf:"bytes,6,opt,name=transferToNew,proto3,oneof"`
}

type ZksyncAction_ForceExit struct {
	ForceExit *ZkForceExit `protobuf:"bytes,7,opt,name=forceExit,proto3,oneof"`
}

type ZksyncAction_SetPubKey struct {
	SetPubKey *ZkSetPubKey `protobuf:"bytes,8,opt,name=setPubKey,proto3,oneof"`
}

type ZksyncAction_FullExit struct {
	FullExit *ZkFullExit `protobuf:"bytes,9,opt,name=fullExit,proto3,oneof"`
}

type ZksyncAction_Swap struct {
	Swap *ZkSwap `protobuf:"bytes,10,opt,name=swap,proto3,oneof"`
}

type ZksyncAction_SetVerifyKey struct {
	SetVerifyKey *ZkVerifyKey `protobuf:"bytes,11,opt,name=setVerifyKey,proto3,oneof"`
}

type ZksyncAction_CommitProof struct {
	CommitProof *ZkCommitProof `protobuf:"bytes,12,opt,name=commitProof,proto3,oneof"`
}

type ZksyncAction_SetVerifier struct {
	SetVerifier *ZkVerifier `protobuf:"bytes,13,opt,name=setVerifier,proto3,oneof"`
}

func (*ZksyncAction_Deposit) isZksyncAction_Value() {}

func (*ZksyncAction_Withdraw) isZksyncAction_Value() {}

func (*ZksyncAction_ContractToTree) isZksyncAction_Value() {}

func (*ZksyncAction_TreeToContract) isZksyncAction_Value() {}

func (*ZksyncAction_Transfer) isZksyncAction_Value() {}

func (*ZksyncAction_TransferToNew) isZksyncAction_Value() {}

func (*ZksyncAction_ForceExit) isZksyncAction_Value() {}

func (*ZksyncAction_SetPubKey) isZksyncAction_Value() {}

func (*ZksyncAction_FullExit) isZksyncAction_Value() {}

func (*ZksyncAction_Swap) isZksyncAction_Value() {}

func (*ZksyncAction_SetVerifyKey) isZksyncAction_Value() {}

func (*ZksyncAction_CommitProof) isZksyncAction_Value() {}

func (*ZksyncAction_SetVerifier) isZksyncAction_Value() {}

//某个token的余额
type TokenBalance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId uint64 `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Balance string `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance,omitempty"`
}

func (x *TokenBalance) Reset() {
	*x = TokenBalance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenBalance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenBalance) ProtoMessage() {}

func (x *TokenBalance) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenBalance.ProtoReflect.Descriptor instead.
func (*TokenBalance) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{1}
}

func (x *TokenBalance) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *TokenBalance) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type AccountTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index           uint64     `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`                     //当前的叶子索引
	TotalIndex      uint64     `protobuf:"varint,2,opt,name=totalIndex,proto3" json:"totalIndex,omitempty"`           //总计叶子索引
	MaxCurrentIndex uint64     `protobuf:"varint,3,opt,name=maxCurrentIndex,proto3" json:"maxCurrentIndex,omitempty"` //当前索引最大值，超过最大值会进行归档
	SubTrees        []*SubTree `protobuf:"bytes,8,rep,name=subTrees,proto3" json:"subTrees,omitempty"`                //当前未归档的子树
}

func (x *AccountTree) Reset() {
	*x = AccountTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountTree) ProtoMessage() {}

func (x *AccountTree) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountTree.ProtoReflect.Descriptor instead.
func (*AccountTree) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{2}
}

func (x *AccountTree) GetIndex() uint64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AccountTree) GetTotalIndex() uint64 {
	if x != nil {
		return x.TotalIndex
	}
	return 0
}

func (x *AccountTree) GetMaxCurrentIndex() uint64 {
	if x != nil {
		return x.MaxCurrentIndex
	}
	return 0
}

func (x *AccountTree) GetSubTrees() []*SubTree {
	if x != nil {
		return x.SubTrees
	}
	return nil
}

type Leaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   uint64    `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`      //accountId其实就是叶子的totalIndex
	EthAddress  string    `protobuf:"bytes,5,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`     //账户对应的以太坊地址
	PubKey      *ZkPubKey `protobuf:"bytes,6,opt,name=pubKey,proto3" json:"pubKey,omitempty"`             //eddsa公钥，用于验证身份
	Chain33Addr string    `protobuf:"bytes,7,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`   //chain33地址
	TokenHash   string    `protobuf:"bytes,8,opt,name=tokenHash,proto3" json:"tokenHash,omitempty"`       //叶子下token的hash
	TokenIds    []uint64  `protobuf:"varint,9,rep,packed,name=tokenIds,proto3" json:"tokenIds,omitempty"` //叶子下拥有的tokenId
}

func (x *Leaf) Reset() {
	*x = Leaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Leaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Leaf) ProtoMessage() {}

func (x *Leaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Leaf.ProtoReflect.Descriptor instead.
func (*Leaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{3}
}

func (x *Leaf) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Leaf) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *Leaf) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *Leaf) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *Leaf) GetTokenHash() string {
	if x != nil {
		return x.TokenHash
	}
	return ""
}

func (x *Leaf) GetTokenIds() []uint64 {
	if x != nil {
		return x.TokenIds
	}
	return nil
}

type HistoryLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   uint64          `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`    //accountId其实就是叶子的totalIndex
	EthAddress  string          `protobuf:"bytes,5,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`   //账户对应的以太坊地址
	PubKey      *ZkPubKey       `protobuf:"bytes,6,opt,name=pubKey,proto3" json:"pubKey,omitempty"`           //eddsa公钥，用于验证身份
	Chain33Addr string          `protobuf:"bytes,7,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"` //chain33地址
	TokenHash   string          `protobuf:"bytes,8,opt,name=tokenHash,proto3" json:"tokenHash,omitempty"`     //叶子下token的hash
	Tokens      []*TokenBalance `protobuf:"bytes,9,rep,name=tokens,proto3" json:"tokens,omitempty"`           //叶子下拥有的token
	ProofId     uint64          `protobuf:"varint,10,opt,name=proofId,proto3" json:"proofId,omitempty"`       //账户状态所在的proofId
}

func (x *HistoryLeaf) Reset() {
	*x = HistoryLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryLeaf) ProtoMessage() {}

func (x *HistoryLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryLeaf.ProtoReflect.Descriptor instead.
func (*HistoryLeaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{4}
}

func (x *HistoryLeaf) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *HistoryLeaf) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *HistoryLeaf) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *HistoryLeaf) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *HistoryLeaf) GetTokenHash() string {
	if x != nil {
		return x.TokenHash
	}
	return ""
}

func (x *HistoryLeaf) GetTokens() []*TokenBalance {
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *HistoryLeaf) GetProofId() uint64 {
	if x != nil {
		return x.ProofId
	}
	return 0
}

type RootInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash   string `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`      //归档Merkle Tree的根hash
	Height     int32  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`         //归档的高度
	StartIndex uint64 `protobuf:"varint,3,opt,name=startIndex,proto3" json:"startIndex,omitempty"` //开始的全局index
}

func (x *RootInfo) Reset() {
	*x = RootInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootInfo) ProtoMessage() {}

func (x *RootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootInfo.ProtoReflect.Descriptor instead.
func (*RootInfo) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{5}
}

func (x *RootInfo) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *RootInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RootInfo) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

type SubTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height   int32  `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	RootHash []byte `protobuf:"bytes,2,opt,name=rootHash,proto3" json:"rootHash,omitempty"` //子树的根hash
}

func (x *SubTree) Reset() {
	*x = SubTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubTree) ProtoMessage() {}

func (x *SubTree) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubTree.ProtoReflect.Descriptor instead.
func (*SubTree) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{6}
}

func (x *SubTree) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SubTree) GetRootHash() []byte {
	if x != nil {
		return x.RootHash
	}
	return nil
}

type MerkleTreeProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash string   `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`
	ProofSet []string `protobuf:"bytes,2,rep,name=proofSet,proto3" json:"proofSet,omitempty"`
	Helpers  []string `protobuf:"bytes,3,rep,name=helpers,proto3" json:"helpers,omitempty"`
}

func (x *MerkleTreeProof) Reset() {
	*x = MerkleTreeProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleTreeProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleTreeProof) ProtoMessage() {}

func (x *MerkleTreeProof) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleTreeProof.ProtoReflect.Descriptor instead.
func (*MerkleTreeProof) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{7}
}

func (x *MerkleTreeProof) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *MerkleTreeProof) GetProofSet() []string {
	if x != nil {
		return x.ProofSet
	}
	return nil
}

func (x *MerkleTreeProof) GetHelpers() []string {
	if x != nil {
		return x.Helpers
	}
	return nil
}

type ZkDeposit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId            uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount             string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	EthAddress         string       `protobuf:"bytes,3,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	Chain33Addr        string       `protobuf:"bytes,4,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`
	EthPriorityQueueId int64        `protobuf:"varint,5,opt,name=ethPriorityQueueId,proto3" json:"ethPriorityQueueId,omitempty"` //需要在合约保证id连续
	Signature          *ZkSignature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkDeposit) Reset() {
	*x = ZkDeposit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkDeposit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkDeposit) ProtoMessage() {}

func (x *ZkDeposit) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkDeposit.ProtoReflect.Descriptor instead.
func (*ZkDeposit) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{8}
}

func (x *ZkDeposit) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkDeposit) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkDeposit) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *ZkDeposit) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *ZkDeposit) GetEthPriorityQueueId() int64 {
	if x != nil {
		return x.EthPriorityQueueId
	}
	return 0
}

func (x *ZkDeposit) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkWithdraw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64       `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkWithdraw) Reset() {
	*x = ZkWithdraw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkWithdraw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkWithdraw) ProtoMessage() {}

func (x *ZkWithdraw) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkWithdraw.ProtoReflect.Descriptor instead.
func (*ZkWithdraw) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{9}
}

func (x *ZkWithdraw) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkWithdraw) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkWithdraw) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkWithdraw) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkContractToTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64       `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkContractToTree) Reset() {
	*x = ZkContractToTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkContractToTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkContractToTree) ProtoMessage() {}

func (x *ZkContractToTree) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkContractToTree.ProtoReflect.Descriptor instead.
func (*ZkContractToTree) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{10}
}

func (x *ZkContractToTree) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkContractToTree) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkContractToTree) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkContractToTree) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkTreeToContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount    string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AccountId uint64       `protobuf:"varint,3,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkTreeToContract) Reset() {
	*x = ZkTreeToContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkTreeToContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkTreeToContract) ProtoMessage() {}

func (x *ZkTreeToContract) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkTreeToContract.ProtoReflect.Descriptor instead.
func (*ZkTreeToContract) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{11}
}

func (x *ZkTreeToContract) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkTreeToContract) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkTreeToContract) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkTreeToContract) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkTransfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId       uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount        string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FromAccountId uint64       `protobuf:"varint,3,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	ToAccountId   uint64       `protobuf:"varint,4,opt,name=toAccountId,proto3" json:"toAccountId,omitempty"`
	Signature     *ZkSignature `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkTransfer) Reset() {
	*x = ZkTransfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkTransfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkTransfer) ProtoMessage() {}

func (x *ZkTransfer) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkTransfer.ProtoReflect.Descriptor instead.
func (*ZkTransfer) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{12}
}

func (x *ZkTransfer) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkTransfer) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkTransfer) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *ZkTransfer) GetToAccountId() uint64 {
	if x != nil {
		return x.ToAccountId
	}
	return 0
}

func (x *ZkTransfer) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkTransferToNew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId          uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount           string       `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FromAccountId    uint64       `protobuf:"varint,3,opt,name=fromAccountId,proto3" json:"fromAccountId,omitempty"`
	ToEthAddress     string       `protobuf:"bytes,4,opt,name=toEthAddress,proto3" json:"toEthAddress,omitempty"`
	ToChain33Address string       `protobuf:"bytes,5,opt,name=toChain33Address,proto3" json:"toChain33Address,omitempty"`
	Signature        *ZkSignature `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkTransferToNew) Reset() {
	*x = ZkTransferToNew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkTransferToNew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkTransferToNew) ProtoMessage() {}

func (x *ZkTransferToNew) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkTransferToNew.ProtoReflect.Descriptor instead.
func (*ZkTransferToNew) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{13}
}

func (x *ZkTransferToNew) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkTransferToNew) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkTransferToNew) GetFromAccountId() uint64 {
	if x != nil {
		return x.FromAccountId
	}
	return 0
}

func (x *ZkTransferToNew) GetToEthAddress() string {
	if x != nil {
		return x.ToEthAddress
	}
	return ""
}

func (x *ZkTransferToNew) GetToChain33Address() string {
	if x != nil {
		return x.ToChain33Address
	}
	return ""
}

func (x *ZkTransferToNew) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkForceExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId   uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	AccountId uint64       `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkForceExit) Reset() {
	*x = ZkForceExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkForceExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkForceExit) ProtoMessage() {}

func (x *ZkForceExit) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkForceExit.ProtoReflect.Descriptor instead.
func (*ZkForceExit) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{14}
}

func (x *ZkForceExit) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkForceExit) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkForceExit) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkSetPubKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId uint64       `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	PubKey    *ZkPubKey    `protobuf:"bytes,2,opt,name=pubKey,proto3" json:"pubKey,omitempty"`
	Signature *ZkSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkSetPubKey) Reset() {
	*x = ZkSetPubKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSetPubKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSetPubKey) ProtoMessage() {}

func (x *ZkSetPubKey) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSetPubKey.ProtoReflect.Descriptor instead.
func (*ZkSetPubKey) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{15}
}

func (x *ZkSetPubKey) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkSetPubKey) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ZkSetPubKey) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkFullExit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenId            uint64       `protobuf:"varint,1,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	AccountId          uint64       `protobuf:"varint,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	EthPriorityQueueId int64        `protobuf:"varint,3,opt,name=ethPriorityQueueId,proto3" json:"ethPriorityQueueId,omitempty"`
	Signature          *ZkSignature `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkFullExit) Reset() {
	*x = ZkFullExit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkFullExit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkFullExit) ProtoMessage() {}

func (x *ZkFullExit) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkFullExit.ProtoReflect.Descriptor instead.
func (*ZkFullExit) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{16}
}

func (x *ZkFullExit) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkFullExit) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkFullExit) GetEthPriorityQueueId() int64 {
	if x != nil {
		return x.EthPriorityQueueId
	}
	return 0
}

func (x *ZkFullExit) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ZkSwap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature *ZkSignature `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ZkSwap) Reset() {
	*x = ZkSwap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkSwap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkSwap) ProtoMessage() {}

func (x *ZkSwap) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkSwap.ProtoReflect.Descriptor instead.
func (*ZkSwap) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{17}
}

func (x *ZkSwap) GetSignature() *ZkSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

//电路验证key
type ZkVerifyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ZkVerifyKey) Reset() {
	*x = ZkVerifyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkVerifyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkVerifyKey) ProtoMessage() {}

func (x *ZkVerifyKey) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkVerifyKey.ProtoReflect.Descriptor instead.
func (*ZkVerifyKey) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{18}
}

func (x *ZkVerifyKey) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type ReceiptSetVerifyKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prev    *ZkVerifyKey `protobuf:"bytes,1,opt,name=prev,proto3" json:"prev,omitempty"`
	Current *ZkVerifyKey `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ReceiptSetVerifyKey) Reset() {
	*x = ReceiptSetVerifyKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptSetVerifyKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptSetVerifyKey) ProtoMessage() {}

func (x *ReceiptSetVerifyKey) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptSetVerifyKey.ProtoReflect.Descriptor instead.
func (*ReceiptSetVerifyKey) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{19}
}

func (x *ReceiptSetVerifyKey) GetPrev() *ZkVerifyKey {
	if x != nil {
		return x.Prev
	}
	return nil
}

func (x *ReceiptSetVerifyKey) GetCurrent() *ZkVerifyKey {
	if x != nil {
		return x.Current
	}
	return nil
}

//commit proof tx data
type ZkCommitProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockStart  uint64 `protobuf:"varint,1,opt,name=blockStart,proto3" json:"blockStart,omitempty"`
	IndexStart  uint64 `protobuf:"varint,2,opt,name=indexStart,proto3" json:"indexStart,omitempty"`
	BlockEnd    uint64 `protobuf:"varint,3,opt,name=blockEnd,proto3" json:"blockEnd,omitempty"`
	IndexEnd    uint64 `protobuf:"varint,4,opt,name=indexEnd,proto3" json:"indexEnd,omitempty"`
	OldTreeRoot string `protobuf:"bytes,5,opt,name=oldTreeRoot,proto3" json:"oldTreeRoot,omitempty"`
	NewTreeRoot string `protobuf:"bytes,6,opt,name=newTreeRoot,proto3" json:"newTreeRoot,omitempty"`
	//proof serialized public input
	PublicInput string `protobuf:"bytes,7,opt,name=publicInput,proto3" json:"publicInput,omitempty"`
	Proof       string `protobuf:"bytes,8,opt,name=proof,proto3" json:"proof,omitempty"`
	//all tx pub datas
	PubDatas         []string `protobuf:"bytes,9,rep,name=pubDatas,proto3" json:"pubDatas,omitempty"`
	PriorityPubDatas []string `protobuf:"bytes,10,rep,name=priorityPubDatas,proto3" json:"priorityPubDatas,omitempty"`
	ProofId          uint64   `protobuf:"varint,11,opt,name=proofId,proto3" json:"proofId,omitempty"`
}

func (x *ZkCommitProof) Reset() {
	*x = ZkCommitProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkCommitProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkCommitProof) ProtoMessage() {}

func (x *ZkCommitProof) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkCommitProof.ProtoReflect.Descriptor instead.
func (*ZkCommitProof) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{20}
}

func (x *ZkCommitProof) GetBlockStart() uint64 {
	if x != nil {
		return x.BlockStart
	}
	return 0
}

func (x *ZkCommitProof) GetIndexStart() uint64 {
	if x != nil {
		return x.IndexStart
	}
	return 0
}

func (x *ZkCommitProof) GetBlockEnd() uint64 {
	if x != nil {
		return x.BlockEnd
	}
	return 0
}

func (x *ZkCommitProof) GetIndexEnd() uint64 {
	if x != nil {
		return x.IndexEnd
	}
	return 0
}

func (x *ZkCommitProof) GetOldTreeRoot() string {
	if x != nil {
		return x.OldTreeRoot
	}
	return ""
}

func (x *ZkCommitProof) GetNewTreeRoot() string {
	if x != nil {
		return x.NewTreeRoot
	}
	return ""
}

func (x *ZkCommitProof) GetPublicInput() string {
	if x != nil {
		return x.PublicInput
	}
	return ""
}

func (x *ZkCommitProof) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *ZkCommitProof) GetPubDatas() []string {
	if x != nil {
		return x.PubDatas
	}
	return nil
}

func (x *ZkCommitProof) GetPriorityPubDatas() []string {
	if x != nil {
		return x.PriorityPubDatas
	}
	return nil
}

func (x *ZkCommitProof) GetProofId() uint64 {
	if x != nil {
		return x.ProofId
	}
	return 0
}

//commit proof stat, pubdata保存到localdb
type CommitProofState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockStart  uint64 `protobuf:"varint,1,opt,name=blockStart,proto3" json:"blockStart,omitempty"`
	IndexStart  uint64 `protobuf:"varint,2,opt,name=indexStart,proto3" json:"indexStart,omitempty"`
	BlockEnd    uint64 `protobuf:"varint,3,opt,name=blockEnd,proto3" json:"blockEnd,omitempty"`
	IndexEnd    uint64 `protobuf:"varint,4,opt,name=indexEnd,proto3" json:"indexEnd,omitempty"`
	OldTreeRoot string `protobuf:"bytes,5,opt,name=oldTreeRoot,proto3" json:"oldTreeRoot,omitempty"`
	NewTreeRoot string `protobuf:"bytes,6,opt,name=newTreeRoot,proto3" json:"newTreeRoot,omitempty"`
	//proof serialized public input
	PublicInput string `protobuf:"bytes,7,opt,name=publicInput,proto3" json:"publicInput,omitempty"`
	Proof       string `protobuf:"bytes,8,opt,name=proof,proto3" json:"proof,omitempty"`
	ProofId     uint64 `protobuf:"varint,9,opt,name=proofId,proto3" json:"proofId,omitempty"`
}

func (x *CommitProofState) Reset() {
	*x = CommitProofState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitProofState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitProofState) ProtoMessage() {}

func (x *CommitProofState) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitProofState.ProtoReflect.Descriptor instead.
func (*CommitProofState) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{21}
}

func (x *CommitProofState) GetBlockStart() uint64 {
	if x != nil {
		return x.BlockStart
	}
	return 0
}

func (x *CommitProofState) GetIndexStart() uint64 {
	if x != nil {
		return x.IndexStart
	}
	return 0
}

func (x *CommitProofState) GetBlockEnd() uint64 {
	if x != nil {
		return x.BlockEnd
	}
	return 0
}

func (x *CommitProofState) GetIndexEnd() uint64 {
	if x != nil {
		return x.IndexEnd
	}
	return 0
}

func (x *CommitProofState) GetOldTreeRoot() string {
	if x != nil {
		return x.OldTreeRoot
	}
	return ""
}

func (x *CommitProofState) GetNewTreeRoot() string {
	if x != nil {
		return x.NewTreeRoot
	}
	return ""
}

func (x *CommitProofState) GetPublicInput() string {
	if x != nil {
		return x.PublicInput
	}
	return ""
}

func (x *CommitProofState) GetProof() string {
	if x != nil {
		return x.Proof
	}
	return ""
}

func (x *CommitProofState) GetProofId() uint64 {
	if x != nil {
		return x.ProofId
	}
	return 0
}

type ReceiptCommitProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prev    *CommitProofState `protobuf:"bytes,1,opt,name=prev,proto3" json:"prev,omitempty"`
	Current *CommitProofState `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ReceiptCommitProof) Reset() {
	*x = ReceiptCommitProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptCommitProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptCommitProof) ProtoMessage() {}

func (x *ReceiptCommitProof) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptCommitProof.ProtoReflect.Descriptor instead.
func (*ReceiptCommitProof) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{22}
}

func (x *ReceiptCommitProof) GetPrev() *CommitProofState {
	if x != nil {
		return x.Prev
	}
	return nil
}

func (x *ReceiptCommitProof) GetCurrent() *CommitProofState {
	if x != nil {
		return x.Current
	}
	return nil
}

//电路验证者名单
type ZkVerifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Verifiers []string `protobuf:"bytes,1,rep,name=verifiers,proto3" json:"verifiers,omitempty"`
}

func (x *ZkVerifier) Reset() {
	*x = ZkVerifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkVerifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkVerifier) ProtoMessage() {}

func (x *ZkVerifier) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkVerifier.ProtoReflect.Descriptor instead.
func (*ZkVerifier) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{23}
}

func (x *ZkVerifier) GetVerifiers() []string {
	if x != nil {
		return x.Verifiers
	}
	return nil
}

type ReceiptSetVerifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prev    *ZkVerifier `protobuf:"bytes,1,opt,name=prev,proto3" json:"prev,omitempty"`
	Current *ZkVerifier `protobuf:"bytes,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ReceiptSetVerifier) Reset() {
	*x = ReceiptSetVerifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptSetVerifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptSetVerifier) ProtoMessage() {}

func (x *ReceiptSetVerifier) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptSetVerifier.ProtoReflect.Descriptor instead.
func (*ReceiptSetVerifier) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{24}
}

func (x *ReceiptSetVerifier) GetPrev() *ZkVerifier {
	if x != nil {
		return x.Prev
	}
	return nil
}

func (x *ReceiptSetVerifier) GetCurrent() *ZkVerifier {
	if x != nil {
		return x.Current
	}
	return nil
}

//zk relayer operators
type RelayerOperators struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operators []string `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators,omitempty"`
}

func (x *RelayerOperators) Reset() {
	*x = RelayerOperators{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayerOperators) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayerOperators) ProtoMessage() {}

func (x *RelayerOperators) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayerOperators.ProtoReflect.Descriptor instead.
func (*RelayerOperators) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{25}
}

func (x *RelayerOperators) GetOperators() []string {
	if x != nil {
		return x.Operators
	}
	return nil
}

// leaf merkle proof票据日志
type ZkReceiptLeaf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Leaf       *Leaf            `protobuf:"bytes,1,opt,name=leaf,proto3" json:"leaf,omitempty"`
	Token      *TokenBalance    `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	TreeProof  *MerkleTreeProof `protobuf:"bytes,3,opt,name=treeProof,proto3" json:"treeProof,omitempty"`
	TokenProof *MerkleTreeProof `protobuf:"bytes,4,opt,name=tokenProof,proto3" json:"tokenProof,omitempty"`
}

func (x *ZkReceiptLeaf) Reset() {
	*x = ZkReceiptLeaf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkReceiptLeaf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkReceiptLeaf) ProtoMessage() {}

func (x *ZkReceiptLeaf) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkReceiptLeaf.ProtoReflect.Descriptor instead.
func (*ZkReceiptLeaf) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{26}
}

func (x *ZkReceiptLeaf) GetLeaf() *Leaf {
	if x != nil {
		return x.Leaf
	}
	return nil
}

func (x *ZkReceiptLeaf) GetToken() *TokenBalance {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *ZkReceiptLeaf) GetTreeProof() *MerkleTreeProof {
	if x != nil {
		return x.TreeProof
	}
	return nil
}

func (x *ZkReceiptLeaf) GetTokenProof() *MerkleTreeProof {
	if x != nil {
		return x.TokenProof
	}
	return nil
}

type ZkQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId         uint64 `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"`
	BlockHeight       uint64 `protobuf:"varint,2,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	TxIndex           uint32 `protobuf:"varint,3,opt,name=txIndex,proto3" json:"txIndex,omitempty"`
	EthAddress        string `protobuf:"bytes,4,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`
	Chain33Addr       string `protobuf:"bytes,5,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"`
	TokenSymbol       string `protobuf:"bytes,6,opt,name=tokenSymbol,proto3" json:"tokenSymbol,omitempty"`
	Chain33WalletAddr string `protobuf:"bytes,7,opt,name=chain33WalletAddr,proto3" json:"chain33WalletAddr,omitempty"`
	TokenId           uint64 `protobuf:"varint,8,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	TxHash            string `protobuf:"bytes,9,opt,name=txHash,proto3" json:"txHash,omitempty"`
	ProofId           uint64 `protobuf:"varint,10,opt,name=proofId,proto3" json:"proofId,omitempty"`
}

func (x *ZkQueryReq) Reset() {
	*x = ZkQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkQueryReq) ProtoMessage() {}

func (x *ZkQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkQueryReq.ProtoReflect.Descriptor instead.
func (*ZkQueryReq) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{27}
}

func (x *ZkQueryReq) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkQueryReq) GetBlockHeight() uint64 {
	if x != nil {
		return x.BlockHeight
	}
	return 0
}

func (x *ZkQueryReq) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *ZkQueryReq) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *ZkQueryReq) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *ZkQueryReq) GetTokenSymbol() string {
	if x != nil {
		return x.TokenSymbol
	}
	return ""
}

func (x *ZkQueryReq) GetChain33WalletAddr() string {
	if x != nil {
		return x.Chain33WalletAddr
	}
	return ""
}

func (x *ZkQueryReq) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkQueryReq) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *ZkQueryReq) GetProofId() uint64 {
	if x != nil {
		return x.ProofId
	}
	return 0
}

type ZkQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationInfos []*OperationInfo `protobuf:"bytes,1,rep,name=operationInfos,proto3" json:"operationInfos,omitempty"`
	Leaves         []*Leaf          `protobuf:"bytes,2,rep,name=leaves,proto3" json:"leaves,omitempty"`
	TokenBalances  []*TokenBalance  `protobuf:"bytes,3,rep,name=tokenBalances,proto3" json:"tokenBalances,omitempty"`
}

func (x *ZkQueryResp) Reset() {
	*x = ZkQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkQueryResp) ProtoMessage() {}

func (x *ZkQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkQueryResp.ProtoReflect.Descriptor instead.
func (*ZkQueryResp) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{28}
}

func (x *ZkQueryResp) GetOperationInfos() []*OperationInfo {
	if x != nil {
		return x.OperationInfos
	}
	return nil
}

func (x *ZkQueryResp) GetLeaves() []*Leaf {
	if x != nil {
		return x.Leaves
	}
	return nil
}

func (x *ZkQueryResp) GetTokenBalances() []*TokenBalance {
	if x != nil {
		return x.TokenBalances
	}
	return nil
}

type ZkReceiptLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationInfo *OperationInfo    `protobuf:"bytes,1,opt,name=operationInfo,proto3" json:"operationInfo,omitempty"`
	LocalKvs      []*types.KeyValue `protobuf:"bytes,2,rep,name=localKvs,proto3" json:"localKvs,omitempty"`
}

func (x *ZkReceiptLog) Reset() {
	*x = ZkReceiptLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkReceiptLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkReceiptLog) ProtoMessage() {}

func (x *ZkReceiptLog) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkReceiptLog.ProtoReflect.Descriptor instead.
func (*ZkReceiptLog) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{29}
}

func (x *ZkReceiptLog) GetOperationInfo() *OperationInfo {
	if x != nil {
		return x.OperationInfo
	}
	return nil
}

func (x *ZkReceiptLog) GetLocalKvs() []*types.KeyValue {
	if x != nil {
		return x.LocalKvs
	}
	return nil
}

type ZkQueryProofReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NeedDetail       bool   `protobuf:"varint,1,opt,name=needDetail,proto3" json:"needDetail,omitempty"`
	StartBlockHeight uint64 `protobuf:"varint,2,opt,name=startBlockHeight,proto3" json:"startBlockHeight,omitempty"`
	EndBlockHeight   uint64 `protobuf:"varint,3,opt,name=endBlockHeight,proto3" json:"endBlockHeight,omitempty"`
	StartIndex       uint64 `protobuf:"varint,4,opt,name=startIndex,proto3" json:"startIndex,omitempty"`
}

func (x *ZkQueryProofReq) Reset() {
	*x = ZkQueryProofReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkQueryProofReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkQueryProofReq) ProtoMessage() {}

func (x *ZkQueryProofReq) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkQueryProofReq.ProtoReflect.Descriptor instead.
func (*ZkQueryProofReq) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{30}
}

func (x *ZkQueryProofReq) GetNeedDetail() bool {
	if x != nil {
		return x.NeedDetail
	}
	return false
}

func (x *ZkQueryProofReq) GetStartBlockHeight() uint64 {
	if x != nil {
		return x.StartBlockHeight
	}
	return 0
}

func (x *ZkQueryProofReq) GetEndBlockHeight() uint64 {
	if x != nil {
		return x.EndBlockHeight
	}
	return 0
}

func (x *ZkQueryProofReq) GetStartIndex() uint64 {
	if x != nil {
		return x.StartIndex
	}
	return 0
}

type ZkQueryProofResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationInfos []*OperationInfo `protobuf:"bytes,1,rep,name=operationInfos,proto3" json:"operationInfos,omitempty"`
}

func (x *ZkQueryProofResp) Reset() {
	*x = ZkQueryProofResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkQueryProofResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkQueryProofResp) ProtoMessage() {}

func (x *ZkQueryProofResp) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkQueryProofResp.ProtoReflect.Descriptor instead.
func (*ZkQueryProofResp) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{31}
}

func (x *ZkQueryProofResp) GetOperationInfos() []*OperationInfo {
	if x != nil {
		return x.OperationInfos
	}
	return nil
}

type ZkOperation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   uint64    `protobuf:"varint,1,opt,name=accountId,proto3" json:"accountId,omitempty"` //accountId其实就是叶子的totalIndex
	TokenId     uint64    `protobuf:"varint,2,opt,name=tokenId,proto3" json:"tokenId,omitempty"`
	Amount      string    `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	EthAddress  string    `protobuf:"bytes,5,opt,name=ethAddress,proto3" json:"ethAddress,omitempty"`   //账户对应的以太坊地址
	PubKey      *ZkPubKey `protobuf:"bytes,6,opt,name=pubKey,proto3" json:"pubKey,omitempty"`           //eddsa公钥，用于验证身份
	Chain33Addr string    `protobuf:"bytes,7,opt,name=chain33Addr,proto3" json:"chain33Addr,omitempty"` //chain33地址
	ToAccountId uint64    `protobuf:"varint,4,opt,name=toAccountId,proto3" json:"toAccountId,omitempty"`
	Ty          int32     `protobuf:"varint,8,opt,name=ty,proto3" json:"ty,omitempty"`
}

func (x *ZkOperation) Reset() {
	*x = ZkOperation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZkOperation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZkOperation) ProtoMessage() {}

func (x *ZkOperation) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZkOperation.ProtoReflect.Descriptor instead.
func (*ZkOperation) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{32}
}

func (x *ZkOperation) GetAccountId() uint64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *ZkOperation) GetTokenId() uint64 {
	if x != nil {
		return x.TokenId
	}
	return 0
}

func (x *ZkOperation) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ZkOperation) GetEthAddress() string {
	if x != nil {
		return x.EthAddress
	}
	return ""
}

func (x *ZkOperation) GetPubKey() *ZkPubKey {
	if x != nil {
		return x.PubKey
	}
	return nil
}

func (x *ZkOperation) GetChain33Addr() string {
	if x != nil {
		return x.Chain33Addr
	}
	return ""
}

func (x *ZkOperation) GetToAccountId() uint64 {
	if x != nil {
		return x.ToAccountId
	}
	return 0
}

func (x *ZkOperation) GetTy() int32 {
	if x != nil {
		return x.Ty
	}
	return 0
}

type EthPriorityQueueID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *EthPriorityQueueID) Reset() {
	*x = EthPriorityQueueID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EthPriorityQueueID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EthPriorityQueueID) ProtoMessage() {}

func (x *EthPriorityQueueID) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EthPriorityQueueID.ProtoReflect.Descriptor instead.
func (*EthPriorityQueueID) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{33}
}

func (x *EthPriorityQueueID) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ReceiptEthPriorityQueueID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prev    int64 `protobuf:"varint,1,opt,name=prev,proto3" json:"prev,omitempty"`
	Current int64 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
}

func (x *ReceiptEthPriorityQueueID) Reset() {
	*x = ReceiptEthPriorityQueueID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_zksync_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptEthPriorityQueueID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptEthPriorityQueueID) ProtoMessage() {}

func (x *ReceiptEthPriorityQueueID) ProtoReflect() protoreflect.Message {
	mi := &file_zksync_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptEthPriorityQueueID.ProtoReflect.Descriptor instead.
func (*ReceiptEthPriorityQueueID) Descriptor() ([]byte, []int) {
	return file_zksync_proto_rawDescGZIP(), []int{34}
}

func (x *ReceiptEthPriorityQueueID) GetPrev() int64 {
	if x != nil {
		return x.Prev
	}
	return 0
}

func (x *ReceiptEthPriorityQueueID) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

var File_zksync_proto protoreflect.FileDescriptor

var file_zksync_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x7a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x0d, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe6, 0x05, 0x0a, 0x0c, 0x5a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x2f, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f,
	0x54, 0x72, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x54,
	0x72, 0x65, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x6f, 0x54, 0x72, 0x65, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x65, 0x65, 0x54, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x65, 0x65, 0x54, 0x6f,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2f, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x12, 0x32, 0x0a, 0x09, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x45, 0x78, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x78, 0x69, 0x74, 0x12, 0x32, 0x0a,
	0x09, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x65, 0x74, 0x50, 0x75,
	0x62, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x2f, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x46, 0x75,
	0x6c, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x48, 0x00, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x45, 0x78,
	0x69, 0x74, 0x12, 0x23, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x38, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65,
	0x79, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65,
	0x79, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x48, 0x00, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x35, 0x0a, 0x0b, 0x73,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x74, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x42, 0x0a, 0x0c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x99, 0x01, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x6d, 0x61, 0x78, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x04,
	0x4c, 0x65, 0x61, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62,
	0x4b, 0x65, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x0b, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2b,
	0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3d, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x54, 0x72, 0x65, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x22, 0x63, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72,
	0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x73, 0x22, 0xe1, 0x01, 0x0a, 0x09, 0x5a, 0x6b,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x74, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x65,
	0x74, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x8e, 0x01,
	0x0a, 0x0a, 0x5a, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x94,
	0x01, 0x0a, 0x10, 0x5a, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x6f, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a,
	0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x5a, 0x6b, 0x54, 0x72, 0x65, 0x65,
	0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xb8, 0x01, 0x0a,
	0x0a, 0x5a, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x0f, 0x5a, 0x6b, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x4e, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x45, 0x74, 0x68,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x6f, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x6f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a,
	0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x77, 0x0a, 0x0b, 0x5a, 0x6b, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x45, 0x78, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x86,
	0x01, 0x0a, 0x0b, 0x5a, 0x6b, 0x53, 0x65, 0x74, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06,
	0x70, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x0a, 0x5a, 0x6b, 0x46, 0x75,
	0x6c, 0x6c, 0x45, 0x78, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x65, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x65, 0x74, 0x68, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0x3a, 0x0a, 0x06, 0x5a, 0x6b, 0x53, 0x77, 0x61, 0x70, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x1f, 0x0a, 0x0b,
	0x5a, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x6b, 0x0a,
	0x13, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12, 0x2c, 0x0a, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4b, 0x65,
	0x79, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xe5, 0x02, 0x0a, 0x0d, 0x5a,
	0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x54, 0x72,
	0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x54, 0x72, 0x65,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77,
	0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x50, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x75, 0x62, 0x44, 0x61, 0x74, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x49, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x49, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x45, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x54, 0x72, 0x65, 0x65, 0x52, 0x6f, 0x6f, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x54, 0x72, 0x65, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6f, 0x66, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2b, 0x0a, 0x04, 0x70,
	0x72, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x2a, 0x0a, 0x0a, 0x5a,
	0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x68, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x70, 0x74, 0x53, 0x65, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x04, 0x70, 0x72, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04,
	0x70, 0x72, 0x65, 0x76, 0x12, 0x2b, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x5a, 0x6b,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x22, 0x30, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x0d, 0x5a, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x4c, 0x65, 0x61, 0x66, 0x12, 0x1f, 0x0a, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61, 0x66,
	0x52, 0x04, 0x6c, 0x65, 0x61, 0x66, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x34, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x09, 0x74, 0x72,
	0x65, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x36, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x52, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22,
	0xc4, 0x02, 0x0a, 0x0a, 0x5a, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74,
	0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x11,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x5a, 0x6b, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x23, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x65, 0x61,
	0x66, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0d, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x22, 0x77, 0x0a, 0x0c, 0x5a, 0x6b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70,
	0x74, 0x4c, 0x6f, 0x67, 0x12, 0x3a, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x2b, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4b, 0x76, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4b, 0x76, 0x73, 0x22, 0xa5, 0x01,
	0x0a, 0x0f, 0x5a, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a,
	0x0e, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x50, 0x0a, 0x10, 0x5a, 0x6b, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0e, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xfa, 0x01, 0x0a, 0x0b, 0x5a, 0x6b, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x74, 0x68, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x74, 0x68,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x5a, 0x6b, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x70, 0x75, 0x62, 0x4b, 0x65, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x33, 0x33, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x74, 0x79, 0x22, 0x24, 0x0a, 0x12, 0x45, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x19, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x74, 0x68, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x32, 0x08, 0x0a, 0x06, 0x7a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x42,
	0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x33, 0x33,
	0x63, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2f, 0x64, 0x61, 0x70, 0x70, 0x2f, 0x7a, 0x6b, 0x73, 0x79, 0x6e, 0x63, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_zksync_proto_rawDescOnce sync.Once
	file_zksync_proto_rawDescData = file_zksync_proto_rawDesc
)

func file_zksync_proto_rawDescGZIP() []byte {
	file_zksync_proto_rawDescOnce.Do(func() {
		file_zksync_proto_rawDescData = protoimpl.X.CompressGZIP(file_zksync_proto_rawDescData)
	})
	return file_zksync_proto_rawDescData
}

var file_zksync_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_zksync_proto_goTypes = []interface{}{
	(*ZksyncAction)(nil),              // 0: types.ZksyncAction
	(*TokenBalance)(nil),              // 1: types.TokenBalance
	(*AccountTree)(nil),               // 2: types.AccountTree
	(*Leaf)(nil),                      // 3: types.Leaf
	(*HistoryLeaf)(nil),               // 4: types.HistoryLeaf
	(*RootInfo)(nil),                  // 5: types.RootInfo
	(*SubTree)(nil),                   // 6: types.SubTree
	(*MerkleTreeProof)(nil),           // 7: types.MerkleTreeProof
	(*ZkDeposit)(nil),                 // 8: types.ZkDeposit
	(*ZkWithdraw)(nil),                // 9: types.ZkWithdraw
	(*ZkContractToTree)(nil),          // 10: types.ZkContractToTree
	(*ZkTreeToContract)(nil),          // 11: types.ZkTreeToContract
	(*ZkTransfer)(nil),                // 12: types.ZkTransfer
	(*ZkTransferToNew)(nil),           // 13: types.ZkTransferToNew
	(*ZkForceExit)(nil),               // 14: types.ZkForceExit
	(*ZkSetPubKey)(nil),               // 15: types.ZkSetPubKey
	(*ZkFullExit)(nil),                // 16: types.ZkFullExit
	(*ZkSwap)(nil),                    // 17: types.ZkSwap
	(*ZkVerifyKey)(nil),               // 18: types.ZkVerifyKey
	(*ReceiptSetVerifyKey)(nil),       // 19: types.ReceiptSetVerifyKey
	(*ZkCommitProof)(nil),             // 20: types.ZkCommitProof
	(*CommitProofState)(nil),          // 21: types.CommitProofState
	(*ReceiptCommitProof)(nil),        // 22: types.ReceiptCommitProof
	(*ZkVerifier)(nil),                // 23: types.ZkVerifier
	(*ReceiptSetVerifier)(nil),        // 24: types.ReceiptSetVerifier
	(*RelayerOperators)(nil),          // 25: types.RelayerOperators
	(*ZkReceiptLeaf)(nil),             // 26: types.ZkReceiptLeaf
	(*ZkQueryReq)(nil),                // 27: types.ZkQueryReq
	(*ZkQueryResp)(nil),               // 28: types.ZkQueryResp
	(*ZkReceiptLog)(nil),              // 29: types.ZkReceiptLog
	(*ZkQueryProofReq)(nil),           // 30: types.ZkQueryProofReq
	(*ZkQueryProofResp)(nil),          // 31: types.ZkQueryProofResp
	(*ZkOperation)(nil),               // 32: types.ZkOperation
	(*EthPriorityQueueID)(nil),        // 33: types.EthPriorityQueueID
	(*ReceiptEthPriorityQueueID)(nil), // 34: types.ReceiptEthPriorityQueueID
	(*ZkPubKey)(nil),                  // 35: types.ZkPubKey
	(*ZkSignature)(nil),               // 36: types.ZkSignature
	(*OperationInfo)(nil),             // 37: types.OperationInfo
	(*types.KeyValue)(nil),            // 38: types.KeyValue
}
var file_zksync_proto_depIdxs = []int32{
	8,  // 0: types.ZksyncAction.deposit:type_name -> types.ZkDeposit
	9,  // 1: types.ZksyncAction.withdraw:type_name -> types.ZkWithdraw
	10, // 2: types.ZksyncAction.contractToTree:type_name -> types.ZkContractToTree
	11, // 3: types.ZksyncAction.treeToContract:type_name -> types.ZkTreeToContract
	12, // 4: types.ZksyncAction.transfer:type_name -> types.ZkTransfer
	13, // 5: types.ZksyncAction.transferToNew:type_name -> types.ZkTransferToNew
	14, // 6: types.ZksyncAction.forceExit:type_name -> types.ZkForceExit
	15, // 7: types.ZksyncAction.setPubKey:type_name -> types.ZkSetPubKey
	16, // 8: types.ZksyncAction.fullExit:type_name -> types.ZkFullExit
	17, // 9: types.ZksyncAction.swap:type_name -> types.ZkSwap
	18, // 10: types.ZksyncAction.setVerifyKey:type_name -> types.ZkVerifyKey
	20, // 11: types.ZksyncAction.commitProof:type_name -> types.ZkCommitProof
	23, // 12: types.ZksyncAction.setVerifier:type_name -> types.ZkVerifier
	6,  // 13: types.AccountTree.subTrees:type_name -> types.SubTree
	35, // 14: types.Leaf.pubKey:type_name -> types.ZkPubKey
	35, // 15: types.HistoryLeaf.pubKey:type_name -> types.ZkPubKey
	1,  // 16: types.HistoryLeaf.tokens:type_name -> types.TokenBalance
	36, // 17: types.ZkDeposit.signature:type_name -> types.ZkSignature
	36, // 18: types.ZkWithdraw.signature:type_name -> types.ZkSignature
	36, // 19: types.ZkContractToTree.signature:type_name -> types.ZkSignature
	36, // 20: types.ZkTreeToContract.signature:type_name -> types.ZkSignature
	36, // 21: types.ZkTransfer.signature:type_name -> types.ZkSignature
	36, // 22: types.ZkTransferToNew.signature:type_name -> types.ZkSignature
	36, // 23: types.ZkForceExit.signature:type_name -> types.ZkSignature
	35, // 24: types.ZkSetPubKey.pubKey:type_name -> types.ZkPubKey
	36, // 25: types.ZkSetPubKey.signature:type_name -> types.ZkSignature
	36, // 26: types.ZkFullExit.signature:type_name -> types.ZkSignature
	36, // 27: types.ZkSwap.signature:type_name -> types.ZkSignature
	18, // 28: types.ReceiptSetVerifyKey.prev:type_name -> types.ZkVerifyKey
	18, // 29: types.ReceiptSetVerifyKey.current:type_name -> types.ZkVerifyKey
	21, // 30: types.ReceiptCommitProof.prev:type_name -> types.CommitProofState
	21, // 31: types.ReceiptCommitProof.current:type_name -> types.CommitProofState
	23, // 32: types.ReceiptSetVerifier.prev:type_name -> types.ZkVerifier
	23, // 33: types.ReceiptSetVerifier.current:type_name -> types.ZkVerifier
	3,  // 34: types.ZkReceiptLeaf.leaf:type_name -> types.Leaf
	1,  // 35: types.ZkReceiptLeaf.token:type_name -> types.TokenBalance
	7,  // 36: types.ZkReceiptLeaf.treeProof:type_name -> types.MerkleTreeProof
	7,  // 37: types.ZkReceiptLeaf.tokenProof:type_name -> types.MerkleTreeProof
	37, // 38: types.ZkQueryResp.operationInfos:type_name -> types.OperationInfo
	3,  // 39: types.ZkQueryResp.leaves:type_name -> types.Leaf
	1,  // 40: types.ZkQueryResp.tokenBalances:type_name -> types.TokenBalance
	37, // 41: types.ZkReceiptLog.operationInfo:type_name -> types.OperationInfo
	38, // 42: types.ZkReceiptLog.localKvs:type_name -> types.KeyValue
	37, // 43: types.ZkQueryProofResp.operationInfos:type_name -> types.OperationInfo
	35, // 44: types.ZkOperation.pubKey:type_name -> types.ZkPubKey
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_zksync_proto_init() }
func file_zksync_proto_init() {
	if File_zksync_proto != nil {
		return
	}
	file_witness_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_zksync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZksyncAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenBalance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Leaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleTreeProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkDeposit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkWithdraw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkContractToTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkTreeToContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkTransfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkTransferToNew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkForceExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSetPubKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkFullExit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkSwap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkVerifyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptSetVerifyKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkCommitProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitProofState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptCommitProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkVerifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptSetVerifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayerOperators); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkReceiptLeaf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkReceiptLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkQueryProofReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkQueryProofResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZkOperation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EthPriorityQueueID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_zksync_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiptEthPriorityQueueID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_zksync_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ZksyncAction_Deposit)(nil),
		(*ZksyncAction_Withdraw)(nil),
		(*ZksyncAction_ContractToTree)(nil),
		(*ZksyncAction_TreeToContract)(nil),
		(*ZksyncAction_Transfer)(nil),
		(*ZksyncAction_TransferToNew)(nil),
		(*ZksyncAction_ForceExit)(nil),
		(*ZksyncAction_SetPubKey)(nil),
		(*ZksyncAction_FullExit)(nil),
		(*ZksyncAction_Swap)(nil),
		(*ZksyncAction_SetVerifyKey)(nil),
		(*ZksyncAction_CommitProof)(nil),
		(*ZksyncAction_SetVerifier)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_zksync_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_zksync_proto_goTypes,
		DependencyIndexes: file_zksync_proto_depIdxs,
		MessageInfos:      file_zksync_proto_msgTypes,
	}.Build()
	File_zksync_proto = out.File
	file_zksync_proto_rawDesc = nil
	file_zksync_proto_goTypes = nil
	file_zksync_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ZksyncClient is the client API for Zksync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ZksyncClient interface {
}

type zksyncClient struct {
	cc grpc.ClientConnInterface
}

func NewZksyncClient(cc grpc.ClientConnInterface) ZksyncClient {
	return &zksyncClient{cc}
}

// ZksyncServer is the server API for Zksync service.
type ZksyncServer interface {
}

// UnimplementedZksyncServer can be embedded to have forward compatible implementations.
type UnimplementedZksyncServer struct {
}

func RegisterZksyncServer(s *grpc.Server, srv ZksyncServer) {
	s.RegisterService(&_Zksync_serviceDesc, srv)
}

var _Zksync_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.zksync",
	HandlerType: (*ZksyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "zksync.proto",
}
