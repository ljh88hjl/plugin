syntax = "proto3";
import "witness.proto";
import "common.proto";

package types;
option go_package = "github.com/33cn/plugin/plugin/dapp/zksync/types";

message ZksyncAction {
  oneof value {
    ZkDeposit  deposit = 1;
    ZkWithdraw withdraw = 2;
    ZkContractToTree contractToTree = 3;
    ZkTreeToContract treeToContract = 4;
    ZkTransfer transfer = 5;
    ZkTransferToNew transferToNew = 6;
    ZkForceExit forceExit = 7;
    ZkSetPubKey setPubKey = 8;
    ZkFullExit  fullExit = 9;
    ZkSwap  swap = 10;
    ZkVerifyKey         setVerifyKey = 11;
    ZkCommitProof         commitProof  = 12;
    ZkVerifier  setVerifier = 13;
  }

  int32 ty = 14;
}


//某个token的余额
message TokenBalance {
  uint64 tokenId = 1;
  string balance = 2;
}

message AccountTree {
  uint64 index = 1;//当前的叶子索引
  uint64 totalIndex = 2;  //总计叶子索引
  uint64 maxCurrentIndex = 3;  //当前索引最大值，超过最大值会进行归档
  repeated SubTree subTrees = 8; //当前未归档的子树
}

message Leaf {
  uint64 accountId = 2; //accountId其实就是叶子的totalIndex
  string ethAddress = 5; //账户对应的以太坊地址
  ZkPubKey pubKey = 6; //eddsa公钥，用于验证身份
  string chain33Addr = 7; //chain33地址
  string tokenHash = 8; //叶子下token的hash
  repeated uint64 tokenIds = 9; //叶子下拥有的tokenId
}

message HistoryLeaf {
  uint64 accountId = 2; //accountId其实就是叶子的totalIndex
  string ethAddress = 5; //账户对应的以太坊地址
  ZkPubKey pubKey = 6; //eddsa公钥，用于验证身份
  string chain33Addr = 7; //chain33地址
  string tokenHash = 8; //叶子下token的hash
  repeated TokenBalance tokens = 9; //叶子下拥有的token
  uint64 proofId = 10; //账户状态所在的proofId
}

message RootInfo {
  string rootHash = 1; //归档Merkle Tree的根hash
  int32 height = 2; //归档的高度
  uint64 startIndex = 3; //开始的全局index
}

message SubTree {
  int32 height = 1;
  bytes rootHash = 2; //子树的根hash
}

message MerkleTreeProof {
  string rootHash = 1;
  repeated string proofSet = 2;
  repeated string helpers = 3;
}

message ZkDeposit {
  uint64 tokenId = 1;
  string amount = 2;
  string ethAddress = 3;
  string chain33Addr = 4;
  int64 ethPriorityQueueId = 5; //需要在合约保证id连续
  ZkSignature signature = 6;

}

message ZkWithdraw {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  ZkSignature signature = 4;
}

message ZkContractToTree {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  ZkSignature signature = 6;
}

message ZkTreeToContract {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 accountId = 3;
  ZkSignature signature = 4;
}

message ZkTransfer {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 fromAccountId = 3;
  uint64 toAccountId = 4;
  ZkSignature signature = 5;
}

message ZkTransferToNew {
  uint64 tokenId = 1;
  string amount = 2;
  uint64 fromAccountId = 3;
  string toEthAddress = 4;
  string toChain33Address = 5;
  ZkSignature signature = 6;
}

message ZkForceExit {
  uint64 tokenId = 1;
  uint64 accountId = 2;
  ZkSignature signature = 3;
}

message ZkSetPubKey {
  uint64 accountId = 1;
  ZkPubKey  pubKey = 2;
  ZkSignature signature = 3;
}

message ZkFullExit {
  uint64 tokenId = 1;
  uint64 accountId = 2;
  int64 ethPriorityQueueId = 3;
  ZkSignature signature = 4;
}

message ZkSwap {
  ZkSignature signature = 1;
}

//电路验证key
message ZkVerifyKey {
  string key = 1;
}

message ReceiptSetVerifyKey {
  ZkVerifyKey prev = 1;
  ZkVerifyKey current = 2;
}

//commit proof tx data
message ZkCommitProof {
  uint64 blockStart  = 1;
  uint64 indexStart  = 2;
  uint64 blockEnd    = 3;
  uint64 indexEnd  = 4;
  uint32 opIndex  = 5;
  string oldTreeRoot = 6;
  string newTreeRoot = 7;
  //proof serialized public input
  string publicInput = 8;
  string proof       = 9;
  //all tx pub datas
  repeated string pubDatas = 10;
  repeated string onChainPubDatas = 11;

  uint64 proofId = 12;
}

//commit proof stat, pubdata保存到localdb
message CommitProofState {
  uint64 blockStart  = 1;
  uint64 indexStart  = 2;
  uint64 blockEnd    = 3;
  uint64 indexEnd  = 4;
  uint32 opIndex  = 5;
  string oldTreeRoot = 6;
  string newTreeRoot = 7;
  //proof serialized public input
  string publicInput = 8;
  string proof       = 9;

  uint64 proofId = 10;
}

message ReceiptCommitProof {
  CommitProofState prev = 1;
  CommitProofState current = 2;
}

//电路验证者名单
message ZkVerifier {
  repeated string verifiers = 1;
}

message ReceiptSetVerifier {
  ZkVerifier prev = 1;
  ZkVerifier current = 2;
}

//zk relayer operators
message RelayerOperators {
  repeated string operators   = 1;
}

// leaf merkle proof票据日志
message ZkReceiptLeaf {
  Leaf leaf = 1;
  TokenBalance token = 2;
  MerkleTreeProof treeProof = 3;
  MerkleTreeProof tokenProof = 4;
}

message ZkQueryReq {
  uint64 accountId = 1;
  uint64 blockHeight = 2;
  uint32 txIndex = 3;
  string ethAddress = 4;
  string chain33Addr = 5;
  string tokenSymbol = 6;
  string chain33WalletAddr = 7;
  uint64 tokenId = 8;
  string txHash = 9;
  uint64 proofId = 10;
}

message ZkQueryResp {
  repeated OperationInfo operationInfos = 1;
  repeated Leaf leaves = 2;
  repeated TokenBalance tokenBalances = 3;
}

message ZkReceiptLog {
  OperationInfo operationInfo = 1;
  repeated KeyValue localKvs = 2;
}

message ZkQueryProofReq {
  bool needDetail = 1;
  uint64 startBlockHeight = 2;
  uint64 endBlockHeight = 3;
  uint64 startIndex = 4;
  uint32 opIndex = 5;
}

message ZkQueryProofResp {
  repeated OperationInfo operationInfos = 1;
}

//query committed proof info
message ZkFetchProofList {
  uint64 startProofId = 1;
  bool onChainPubDataOnly = 2; //是否全部pubdata的proof 还是只需要onChain pubdatas
}

message ZkOperation {

  uint64 accountId = 1; //accountId其实就是叶子的totalIndex
  uint64 tokenId = 2;
  string amount = 3;
  string ethAddress = 5; //账户对应的以太坊地址
  ZkPubKey pubKey = 6; //eddsa公钥，用于验证身份
  string chain33Addr = 7; //chain33地址
  uint64 toAccountId = 4;

  int32 ty = 8;
}

message EthPriorityQueueID {
  string ID = 1;
}

message ReceiptEthPriorityQueueID {
  int64 prev = 1;
  int64 current = 2;
}

service zksync{}
